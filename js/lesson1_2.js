// *** 1. Індексація
// let str1 = 'Hello world';

// console.log(str1.length); // довжина рядка, виведе 11
// console.log(str1[0]); // індекс елемента, виведе Н
// console.log(str1.length - 1); // виведе 10, індекс останнього елемента
// console.log(str1[str1.length - 1]); // виведе d, значення останнього елемента.


// =====================================================

// *** 2. Функції - це якась інструкція
// function foo() {
//     console.log('Hello');
//     console.log('World');
//     console.log('test');
// }

// debugger; // ставить на паузу код і покроково показує, що ми зробили

// foo();
// foo();
// foo();

// foo - назва функції
// {} - тіло функції, всередині пишуться якісь дії
// foo() - виклик функції, можна викликати багато разів


// * Параметри функції - це вхідні дані, з якими можна працювати всередині функції

// тут х та у - це параметри (змінні) функції sum, те що ми обіцяємо, параметрів може бути багато.
// тут 10 та 20 - це аргументи (значення змінних х та у) функції sum, те, що ми даємо.
// кількість параметрів і аргументів може відрізнятись між собою.

// * function sum(x, y) {
//     console.log(x + y);
// }

// sum(10, 20); // виведе 30 в консоль
// sum(50, 50); // виведе 100
// sum(90, 1320); // виведе 1410


// * function pow(x, y) {
//     console.log(x ** y);
// }

// pow(2, 4); // приводить до степеня, виведе 16
// pow(2, 6); // приводить до степеня, виведе 64
// pow(3, 4); // приводить до степеня, виведе 81

// * під капотом це виглядає так:
// function pow(x, y) {
     // const x = 2;
     // const y = 4;
//     console.log(x ** y);
// }

// pow(2, 4);


// =====================================================

// *** 3. Return
// - це повернення результату від нашої функції;
// - є лише всередині функції і ніде більше;
// - зупиняє виконання функції.

// *function foo(x, y) {
//     return x + y;
// }
// const result = foo(10, 50);
// console.log(result); // виведе 60;

// - Будь яка функція за замовчуваням повертає нам результат, який ми можемо зберегти в змінну.
// - коли ми її викликаємо, як в коді вище, то результат функції запишеться в змінну result.

// * function foo() {}
// console.log(foo()); // виведе undefined

// * function foo(x, y) {
//     x **= 2; // 4
//     y **= 2; // 9
//     const sum = x + y; // 13
//     const result = sum / 2; // 6.5

//     return result;
// }

// const result = foo(2, 3)
// console.log(result); // виведе 6.5

// * function foo() {
//     console.log(1);
//     console.log(2);
//     return 3; // return зупинив виконання функції, бо нам повернувся результат
//     console.log(4); // це і нижче не виконається, вони навіть підсвічуюються сірим
//     console.log(5);
//     return 10
// }


// ======================================================

// *** 4. Блочна бласть видимості
// { } - всередині цих дужок, це блочна область видимості, за межами глобальна

// const x = 10; // створені змінні в глобальні області видимості
// const y = 50;

// function foo1() {
//     const x = 100;
//     console.log(x, y);
// }

// function foo2() {
//     const x = 200;
//     const y = 300;
//     console.log(x, y);
// }

// function foo3() {
//     const y = 20;
//     console.log(x, y);
// }

// foo1(); // виведе 100 50 // при виклику цієї функції, js почне шукати х в блочній області (тобто в тілі функції foo1), а не знайшовши у в блочні області, піде в глобальну (до батька)
// foo2(); // виведе 200 300 // всі значення знайшов в блочні області видимості (в тілі foo2)
// foo3(); // виведе 10 20 // х взяв з глобально (батьківської) області, а у з блочної (в тілі foo3)
// якщо у батька нічого немає, то піде до діда.


// ===================================================

// *** 5. Виклик функції всередині іншої йункції

// * function foo(x, y) {
//     return x - y;
// }

// const result = Math.pow(foo(5, 3), foo(2, 1));
// console.log(result);

// - спочатку виконає foo(5, 3), тобто 5-3, і на місце foo(5, 3) поставить 2;
// - далі виконає foo(2, 1), тобто 2-1, і на місце foo(2, 1) поставить 1;
// - далі виконає Math.pow, тобто 2 в степені 1, виведе 2.
// - можна зберегти це в змінну, тобто const result = Math.pow(foo(5, 3), foo(2, 1));
// - далі виводимо в консоль



